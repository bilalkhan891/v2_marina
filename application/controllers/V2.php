<?php
//use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
 //require(APPPATH'.libraries/REST_Controller.php');
class Api extends REST_Controller {

    //use REST_Controller;
    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->model('Mainmodel', 'mm');
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === null)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => false,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(null, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = null;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => false,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(null, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function marina_get($marina = ''){
        // $marina = $this->get('marina'); 

        if ($marina === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Marina username missing'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $data = $this->mm->fetchArr("marinas", "", ["username" => $marina]);
        // $data = $data->result_array();
        // 
        if (isset($data[0]['username'])) {
            // print_r($data);
            unset($data[0]['username']);
            unset($data[0]['contactname']);
            unset($data[0]['date']);
            unset($data[0]['status']);
            unset($data[0]['ids_id']);
            unset($data[0]['api_id']);
            unset($data[0]['apicheck']);
        }


        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function tides_get($marina = null, $start = null, $end = null){
        // $marina = $this->get('marina'); 

        if ($marina === null || $start === null || $end === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with the parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        
        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('tides', ['day', 'date', 'time', 'height', 'state'], ['date >=' => $start, 'date <=' => $end, 'marinaid' => $marinaId], NULL, $order);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function locks_get($marina = null, $start = null, $end = null){
        // $marina = $this->get('marina'); 

        if ($marina === null || $start === null || $end === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with the parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        
        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('lockclosures', ['date', 'day', 'close', 'reopen'], ['date >=' => $start, 'date <=' => $end, 'marinaid' => $marinaId], NULL, $order);

        $this->response($data, REST_Controller::HTTP_OK);
    }
    public function bristollocks_get($start = null, $end = null){
        // $marina = $this->get('marina'); 

        if ($start === null || $end === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with the parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        
        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('bristollocks', '', ['date >=' => $start, 'date <=' => $end], NULL, $order);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function businessTypes_get($marina = null){
        // $marina = $this->get('marina'); 

        if ($marina === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Marina username missing'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        if (!isset($marinaId)) {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('businesstypes', ['id','name'], ['marinaid' => $marinaId]);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function businesses_get($marina = null, $id = null){
        // $marina = $this->get('marina'); 

        if ($marina === null || $id === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        if (!isset($marinaId)) {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('business', ['id', 'name', 'AddressLine1', 'AddressLine2', 'AddressLine3', 'PostCode', 'tel', 'email', 'web', 'lat', 'longitude', 'web'], ['marinaid' => $marinaId, 'businesstypeid' => $id]);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function business_get($marina = null, $id = null){
        // $marina = $this->get('marina'); 

        if ($marina === null || $id === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        
        if (!isset($marinaId)) {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('business', '', ['marinaid' => $marinaId, 'id' => $id]);
        
        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function subscribers_post($marina = null, $type = null){
        if (isset($this->post()[0]['email'])) {
            $email = $this->post()[0]['email']; 
        } else {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        if ($marina === null || $type === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $marinaId = $this->mm->fetchArr('marinas', ['id'], ['username' => $marina])[0]['id'];
        if (!isset($marinaId)) {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $this->mm->insertRow('subscribers', ['email' => $email, 'subType' => (int)$type, 'marinaId' => $marinaId]);
        $insertId = $this->db->insert_id();
        $data = $this->mm->fetchArr('subscribers', ['id', 'email', 'subType'], ['id' => $insertId]);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    public function calcRates_get ($marina = null, $parm1 = null, $parm2 = null, $parm3 = null, $parm4 = null) {
 
    	switch ($marina) {
    		case 'swanseamarina': 
    			    $this->response([
    			        'status' => false,
    			        'message' => 'Wrong Marina username!'
    			    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code 
    			break;
    		
    		case 'padsstowmarina':
    			$this->padsstowmarina($parm1, $parm2, $parm3);
    			break;

    		default:
    			$this->response([
    			    'status' => false,
    			    'message' => 'Wrong Marina username!'
    			], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
	    		break;
    	} 
    }
    // Get Sponser  data

    public function sponser_get($marina = null){
      

        if ($marina === null) {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'Something went wrong with parameters'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
        $marinauser = $this->mm->fetchArr('marinas', ['username'], ['username' => $marina])[0]['username'];
        if (!isset($marinauser)) {
            $this->response([
                'status' => false,
                'message' => 'Wrong Marina username!'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

        $order['by'] = 'date';
        $order['order'] = 'ASC';
        $data = $this->mm->fetchArr('sponsor', '', ['marinauser' => $marinauser]);

        $this->response($data, REST_Controller::HTTP_OK);
    }

    // end sponser data

    public function bristolharbour_post(){

        $data = json_decode($this->post()[0], true);
        $Class_A_Berthing       = 116.80;
        $Class_B_Berthing_Pontoon_Berth   = 104.90;
        $Pontoon_Per_Metre    = 168.25;
        $Club_Pontoon     = 139.70;
        $Temple_Quay_Without_Services   = 125.00;
        $Temple_Quay_With_Services      = 132.70;
        $Pontoon_Temple_Back  = 141.55;
        $Winter_Berth     = 141.35;
        $Pontoon_Hanover_Quay     = 221.00;
        if ($data == null || !isset($data['length']) || !isset($data['multihull']) || !isset($data['btype']) || !isset($data['days'])) {
            $this->response([
                'status' => false,
                'message' => 'Forbidden'
            ], REST_Controller::HTTP_FORBIDDEN); // NOT_FOUND (404) being the HTTP 
        }
        $data['length'] = round($data['length'] * 2) / 2;
        if ($data['btype'] == 'visiting') {
            $ek     = 1.95; 
            $do     = 1.65; 
            $teen   = 1.26;
            $char   = 0.93;
            $res['days'] = $data['days'];
            $res['length'] = $data['length'];
            if ($data['days'] == 1 &&  $data['multihull']=="No")   { 
                $res['CalcPayemnt'] = $data['length']*$ek;
            } elseif ($data['days'] == 1 &&  $data['multihull']=="Yes")  { 
                $res['CalcPayemnt'] = $data['length']*$ek*1.5;
            } elseif ($data['days'] < 8 &&  $data['multihull']=="No")    { 
                $res['CalcPayemnt'] = $data['length']*$do*$data['days'];
            } elseif ($data['days'] < 8 &&  $data['multihull']=="Yes")   { 
                $res['CalcPayemnt'] = $data['length']*$do*1.5*$data['days'];
            } elseif ($data['days'] < 15 &&  $data['multihull']=="No")   { 
                $res['CalcPayemnt'] = $data['length']*$teen*$data['days'];
            } elseif ($data['days'] < 15 &&  $data['multihull']=="Yes")  { 
                $res['CalcPayemnt'] = $data['length']*$teen*1.5*$data['days'];
            } elseif ($data['days'] < 22 &&  $data['multihull']=="No")   { 
                $res['CalcPayemnt'] = $data['length']*$char*$data['days'];
            } elseif ($data['days'] < 22 &&  $data['multihull']=="Yes")  { 
                $res['CalcPayemnt'] = $data['length']*$char*1.5*$data['days'];
            } else {
                $res['CalcPayemnt'] = 'Days more then 21';
            }

        } elseif($data['btype'] == 'annual') {

            $res["Rounded Boat Length"] = 'Anuual Cost';
            $res["Multi Hull"] = "No";
            $res["Rounded Boat Length"] = $data['length'];
            
            $res["Rounded Boat Length"] = 'Anuual Cost';
            $res['Class A Berthing']        = $Class_A_Berthing*$data['length'];
            $res['Class B Berthing Pontoon Berth']      = $Class_B_Berthing_Pontoon_Berth*$data['length'];
            $res['Pontoon Per Metre']       = $Pontoon_Per_Metre*$data['length'];
            $res['Club Pontoon']        = $Club_Pontoon*$data['length'];
            $res['Temple Quay Without Services']        = $Temple_Quay_Without_Services*$data['length'];
            $res['Temple Quay With Services']       = $Temple_Quay_With_Services*$data['length'];
            $res['Pontoon Temple Back']         = $Pontoon_Temple_Back*$data['length'];
            $res['Winter Berth']        = $Winter_Berth*$data['length'];
            $res['Pontoon Hanover Quay']        = $Pontoon_Hanover_Quay*$data['length'];

            if ($data['multihull'] == 'Yes') {
                
                $res["Multi Hull"] = "Yes";
                $res["Rounded Boat Length"] = $data['length'];

                $res['Class A Berthing'] = $res['Class A Berthing']*1.5;
                $res['Class B Berthing Pontoon Berth'] = $res['Class B Berthing Pontoon Berth']*1.5;
                $res['Pontoon Per Metre'] = $res['Pontoon Per Metre']*1.5;
                $res['Club Pontoon'] = $res['Club Pontoon']*1.5;
                $res['Temple Quay Without Services'] = $res['Temple Quay Without Services']*1.5;
                $res['Temple Quay With Services'] = $res['Temple Quay With Services']*1.5;
                $res['Pontoon Temple Back'] = $res['Pontoon Temple Back']*1.5;
                $res['Winter Berth'] = $res['Winter Berth']*1.5;
                $res['Pontoon Hanover Quay'] = $res['Pontoon Hanover Quay']*1.5;
            }
        } else {
            $this->response([
                'status' => false,
                'message' => 'Berthing Type not correct!'
            ], REST_Controller::HTTP_FORBIDDEN); // NOT_FOUND (404) being the HTTP 
        }
        


        $this->response($res, REST_Controller::HTTP_OK);

    }
 





    public function padsstowmarina_post($parm1 = null, $parm2 = null, $parm3 = null){
    	if ($parm1 == null || $parm2 == null || $parm3 == null || !is_numeric($parm2) || !is_numeric($parm3)) { 
			$this->response([
		        'status' => false,
		        'message' => 'Error In Parameters'
		    ], REST_Controller::HTTP_FORBIDDEN); // NOT_FOUND (404) being the HTTP response code
		} else {
		    if ($parm1 == 'river') { 
	    		if ($parm3 <= 6) {
	    			$price = 2.10;
	    		} elseif ($parm3 >= 7 || $parm3 <= 20) {
	    			$price = 1.80;
	    		} elseif ($parm3 > 20) {
	    			$price = 1.60;
	    		}
	    		$data = array('cost' => $parm2*$parm3*$price);
	    		$this->response($data, REST_Controller::HTTP_OK);
 
		    } elseif ($parm1 == 'quay') {
		    	 if ($parm3 == 1) {
		    	 	$price = 1.13;
		    	 } elseif ($parm3 == 2 ) {
		    	 	$price = 4.48;
		    	 } elseif ($parm3 == 3) {
		    	 	$price = 10.50;
		    	 } elseif ($parm3 == 4) {
		    	 	$price = 17.24;
		    	 }
		    	 $data = array('cost' => $parm2*$parm3*$price);
		    	 $this->response($data, REST_Controller::HTTP_OK);
		    } else {
	    		$this->response([
	    	        'status' => false,
	    	        'message' => 'Parameter 1 should either be "river" or "quay". '
	    	    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
		    }
		}
    } 
}
